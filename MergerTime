#!/usr/bin/env python

"""
Fit an eccentric waveform using SEOBNRv4E, using fitted optimal parameters.
Should be called on a SimulationAnnex directory, where it will read mass ratio
and spins, and the waveform to be fit.

Outputs a pdf with diagnostics and final fits, as well as printing the final
time to merger.
"""

from __future__ import division
from __future__ import print_function

import os
import argparse

import matplotlib
from matplotlib.backends.backend_pdf import PdfPages
import matplotlib.pyplot as plt
import numpy as np
import scipy

matplotlib.rcParams["mathtext.fontset"] = "stix"
matplotlib.rcParams["font.family"] = "STIXGeneral"
matplotlib.rcParams["axes.linewidth"] = 1  # set the value globally
plt.rcParams["figure.figsize"] = (14, 10)
plt.rcParams["font.size"] = "18"

import argparse
import os

from scipy.interpolate import InterpolatedUnivariateSpline
import lal, lalsimulation
import gw_eccentricity
import sxs


# Some functions to plot the time domain modes
def AmpPhysicaltoNRTD(ampphysical, M, dMpc):
    return ampphysical * dMpc * 1e6 * lal.PC_SI / (lal.C_SI * (M * lal.MTSUN_SI))


def compute_freqInterp(time, hlm):
    philm = np.unwrap(np.angle(hlm))

    intrp = InterpolatedUnivariateSpline(time, philm)
    omegalm = intrp.derivative()(time)

    return omegalm


def SectotimeM(seconds, M):
    return seconds / (M * lal.MTSUN_SI)


# Function to compute amplitude, phase and frequency difference


def compute_phase_amp_om_diff(
    timeNRv4EHM,
    amplmv4EHM,
    phaselmv4EHM,
    omegalmv4EHM,
    timeNRv4HM,
    amplmv4HM,
    phaselmv4HM,
    omegalmv4HM,
    mode_list,
    align_start=True,
):
    timeCommon = {}
    phidiff = {}
    omdiff = {}
    ampdiff = {}
    for l, m in mode_list:
        # print(l,m)
        ttv4EHM = timeNRv4EHM
        ampv4EHM = amplmv4EHM[l, m]
        phv4EHM = phaselmv4EHM[l, m]
        omv4EHM = omegalmv4EHM[l, m]

        ttv4HM = timeNRv4HM
        ampv4HM = amplmv4HM[l, m]
        phv4HM = phaselmv4HM[l, m]
        omv4HM = omegalmv4HM[l, m]

        dtv4E = ttv4EHM[-1] - ttv4EHM[-2]
        dtv4 = ttv4HM[-1] - ttv4HM[-2]
        dt = min(dtv4E, dtv4)

        t0v4 = ttv4HM[0]
        t0v4E = ttv4EHM[0]

        tmin = max(t0v4, t0v4E)
        tmax = min(ttv4HM[-1], ttv4EHM[-1])

        timeCommon = np.arange(tmin, tmax, dt)

        iphv4 = InterpolatedUnivariateSpline(ttv4HM, phv4HM)
        iomv4 = InterpolatedUnivariateSpline(ttv4HM, omv4HM)
        iampv4 = InterpolatedUnivariateSpline(ttv4HM, ampv4HM)

        iphv4E = InterpolatedUnivariateSpline(ttv4EHM, phv4EHM)
        iomv4E = InterpolatedUnivariateSpline(ttv4EHM, omv4EHM)
        iampv4E = InterpolatedUnivariateSpline(ttv4EHM, ampv4EHM)

        if align_start == True:
            delta_phi0 = -iphv4(tmin) + iphv4E(tmin)

        else:
            tAlign = 0
            delta_phi0 = -iphv4(tAlign) + iphv4E(tAlign)

        phidiff[l, m] = iphv4E(timeCommon) - (iphv4(timeCommon) + delta_phi0)
        ampdiff[l, m] = iampv4E(timeCommon) - iampv4(timeCommon)
        omdiff[l, m] = iomv4E(timeCommon) - iomv4(timeCommon)

    return timeCommon, phidiff, omdiff, ampdiff


def waveform_to_frequency(waveform_dict):
    return -np.diff(np.unwrap(np.angle(waveform_dict["hlm"][(2, 2)]))) / np.diff(
        waveform_dict["t"]
    )


def compute_deriv_f(time, f):
    intrp = InterpolatedUnivariateSpline(time, f)
    deriv = intrp.derivative()(time)

    return deriv


# Generate modes in NR units (rescaled by total mass of the system)
def SEOBNRv4EHM_modes_lightweight(
    q: float,
    chi1: float,
    chi2: float,
    eccentricity: float,
    eccentric_anomaly: float,
    f_min: float,
    M_fed: float,
    delta_t: float,
    EccIC: int,
):
    # Some internal parameters of the model
    HypPphi0, HypR0, HypE0 = [0.0, 0, 0]

    EccFphiPNorder = 99
    EccFrPNorder = 99
    EccWaveformPNorder = 16
    EccBeta = 0.09
    Ecct0 = 100

    EccPNFactorizedForm = (
        EccNQCWaveform
    ) = EccPNRRForm = EccPNWfForm = EccAvNQCWaveform = 1
    EcctAppend = 40

    m1 = q / (1 + q) * M_fed
    m2 = 1 / (1 + q) * M_fed
    dMpc = 500
    dist = dMpc * (1e6 * lal.PC_SI)

    SpinAlignedVersion = 41
    ellMaxForNyquistCheck = 5
    nqcCoeffsInput = lal.CreateREAL8Vector(
        50
    )  ##This will be unused, but it is necessary

    sphtseries, dyn, dynHi = lalsimulation.SimIMRSpinAlignedEOBModesEcc_opt1(
        delta_t,
        m1 * lal.MSUN_SI,
        m2 * lal.MSUN_SI,
        f_min,
        dist,
        chi1,
        chi2,
        eccentricity,
        eccentric_anomaly,
        SpinAlignedVersion,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        1.0,
        nqcCoeffsInput,
        0,
        EccFphiPNorder,
        EccFrPNorder,
        EccWaveformPNorder,
        EccPNFactorizedForm,
        EccBeta,
        Ecct0,
        EccNQCWaveform,
        EccPNRRForm,
        EccPNWfForm,
        EccAvNQCWaveform,
        EcctAppend,
        EccIC,
        HypPphi0,
        HypR0,
        HypE0,
        ellMaxForNyquistCheck,
        0.0,
    )

    hlm = {}

    ##22 mode
    modeL = sphtseries.next.next.next.next.l
    modeM = sphtseries.next.next.next.next.m
    h22 = sphtseries.next.next.next.next.mode.data.data  # This is h_22
    hlm[modeL, modeM] = AmpPhysicaltoNRTD(h22, M_fed, dMpc)
    hlm[modeL, -modeM] = ((-1) ** modeL) * np.conjugate(hlm[modeL, modeM])

    time_array = np.arange(0, len(hlm[2, 2]) * delta_t, delta_t)
    timeNR = SectotimeM(time_array, M_fed)

    lenDyn = int(dyn.length / 5)
    tdyn = dyn.data[0:lenDyn]
    tdyn -= tdyn[0]
    rdyn = dyn.data[lenDyn : 2 * lenDyn]

    imax = np.argmax(np.abs(hlm[2, 2]))
    timeNR -= timeNR[imax]

    phidyn = dyn.data[2 * lenDyn : 3 * lenDyn]
    omegaOrbital = compute_deriv_f(tdyn, phidyn)

    return (timeNR, hlm, rdyn, omegaOrbital)


# Function to minimise over.
def func(f_min):
    (timeNRv4EHM, _, _, _) = SEOBNRv4EHM_modes_lightweight(
        q,
        chi1,
        chi2,
        args.efin[0],
        ecc_anomaly,
        float(f_min),
        Mtot,
        delta_t,
        EccIC,
    )
    print(np.abs(args.Tfin[0] + timeNRv4EHM[0]))
    return np.abs(args.Tfin[0] + timeNRv4EHM[0])


def initial_check(f_min):
    (timeNRv4EHM, _, _, _) = SEOBNRv4EHM_modes_lightweight(
        q,
        chi1,
        chi2,
        args.e0[0],
        ecc_anomaly,
        f_min,
        Mtot,
        delta_t,
        EccIC,
    )
    return timeNRv4EHM[0]


def read_sep_omega(ecc, f_min):
    (_, _, rdyn, omegadyn) = SEOBNRv4EHM_modes_lightweight(
        q,
        chi1,
        chi2,
        float(ecc),
        ecc_anomaly,
        float(f_min),
        Mtot,
        delta_t,
        EccIC,
    )
    return [rdyn[0], omegadyn[0]]


# ===============================================================
if __name__ == "__main__":
    p = argparse.ArgumentParser(usage=__doc__)
    p.add_argument(
        "--e0",
        type=float,
        nargs=1,
        help="Initial eccentricity input.",
    )
    p.add_argument(
        "--f0",
        type=float,
        nargs=1,
        help="Initial f_min input.",
    )
    p.add_argument("--efin", nargs=1, type=float, help="Target eccentricity.")
    p.add_argument("--Tfin", nargs=1, type=float, help="Target merger time.")
    p.add_argument("--q0", nargs=1, type=float, help="Mass-ratio.")
    p.add_argument("--spin1", nargs=1, type=float, default=0.0, help="Spin 1.")
    p.add_argument("--spin2", nargs=1, type=float, default=0.0, help="Spin 2.")

    args = p.parse_args()

    q = args.q0[0]
    chi1, chi2 = (
        args.spin1[0],
        args.spin2[0],
    )
    Mtot = 40.0
    delta_t = 1.0 / (4096.0) / 2.0
    EccIC = -2
    ecc_anomaly = np.pi

    tol = 1e-4
    initial_guess = np.array([args.f0[0]])

    T_initial = -initial_check(args.f0[0])
    print("EOB predicted merger time: " + str(T_initial))

    res = scipy.optimize.minimize(
        func,
        initial_guess,
        method="Nelder-Mead",
        tol=tol,
    )

    print("Initial seperation and frequency:")
    print(read_sep_omega(args.e0[0], args.f0[0]))
    print("Final seperation and frequency:")
    print(read_sep_omega(args.efin[0], res.x[0]))
    print("Fractional Changes:")
    print(
        np.array(read_sep_omega(args.efin[0], res.x[0]))
        / np.array(read_sep_omega(args.e0[0], args.f0[0]))
    )

    os.sys.exit(0)

###########################################
